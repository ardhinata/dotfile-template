#!/usr/bin/env bash
set -e
BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TOOL_NAME="$0"
DATE_NOW="$(date --iso-8601=date)"
TIME_NOW="$(date +%H%M%S)"
KEY_LIST=""

usage() {
	echo """
	Helper usage: $0 [encrypt|decrypt|help]
	"""
}

help() {
	usage
	echo """
encrypt: Archive and encrypt all files on secret directory.
decrypt: Decrypt pgp-encrypted archive to current directory.
help: Display this help
	"""
}

check_dir() {
	echo "Checking dirctories..."
	if [[ ! -d $BASEDIR/encrypted/backup ]]; then
		echo "Directory encrypted/backup not found. Creating now..."
		mkdir -p $BASEDIR/encrypted/backup;
	fi
	if [[ ! -d $BASEDIR/encrypted/recipient ]]; then
		echo "Directory encrypted/recipient not found. Creating now..."
		mkdir -p $BASEDIR/encrypted/recipient
	fi
	echo ""
}

print_keys() {
	echo "Checking public keys..."
	for keys in $(ls $BASEDIR/encrypted/recipient); do
		GPG_OUT="$((gpg --show-keys --keyid-format long $BASEDIR/encrypted/recipient/$keys 2>/dev/null | grep pub | awk '{print $2}') || true)"
		if [[ $GPG_OUT ]]; then
			echo "Found key $keys ($GPG_OUT)"
			KEY_LIST="$keys $KEY_LIST"
		fi
	done
	echo ""
}

encrypt() {
	if [[ ! $KEY_LIST ]]; then
		echo "No public key in recipient directory! Aborting encryption"
		exit 1;
	fi
	if [[ -e $BASEDIR/secret.tar.zst.gpg ]]; then
		echo "Found existing archive. Moving old archive to backup directory..."
		if [[ ! -d $BASEDIR/encrypted/backup/$DATE_NOW ]]; then
			mkdir $BASEDIR/encrypted/backup/$DATE_NOW
		fi
		mv $BASEDIR/secret.tar.zst.gpg $BASEDIR/encrypted/backup/$DATE_NOW/$TIME_NOW-secret.tar.zst.gpg
	fi
	RECIPIENT_NAME="";
	for key in $KEY_LIST; do
		RECIPIENT_NAME="--recipient-file $BASEDIR/encrypted/recipient/$key $RECIPIENT_NAME"
	done
	RETVAL="$(tar -cO secret/ | zstd -T0 -19 --long | gpg --encrypt --compress-algo none --output $BASEDIR/secret.tar.zst.gpg $RECIPIENT_NAME --yes --verbose 2>&1)"
	if [[ $? -eq 0 ]]; then
		echo "Secret directory archived and encrypted."
	else
		echo "Failed to encrypt secret directory. Execution logs:"
		echo "$RETVAL"
		exit 1
	fi
}

decrypt() {
	if [[ ! -e $BASEDIR/secret.tar.zst.gpg ]]; then
		echo "ERROR: File $BASEDIR/secret.tar.zst.gpg not exist."
		exit 1
	fi
	gpg --decrypt $BASEDIR/secret.tar.zst.gpg 2>$BASEDIR/encrypted/gpg.log | zstd -d | tar --overwrite -xf -
	if [[ $? -eq 0 ]]; then
		echo "Secret archive decrypted."
	else
		echo "Failed to decrypt secret directory. Execution logs:"
		cat $BASEDIR/encrypted/gpg.log
	fi
	rm $BASEDIR/encrypted/gpg.log
}

# echo "$BASEDIR $TOOL_NAME $DATE_NOW"

case "$1" in
	encrypt)
		check_dir
		print_keys
		encrypt
		;;

	decrypt)
		decrypt
		;;
	help)
		help
		;;
	*)
		usage
		;;
esac
